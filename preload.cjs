const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('api', {
  settings: {
    get: () => ipcRenderer.invoke('settings:get'),
    set: (data) => ipcRenderer.invoke('settings:set', data),
  },
  supabaseUpload: (data) => ipcRenderer.invoke('supabase:upload', data),
  supabaseDelete: (data) => ipcRenderer.invoke('supabase:delete', data),
  sounds: {
    get: () => ipcRenderer.invoke('sounds:get'),
    set: (data) => ipcRenderer.invoke('sounds:set', data),
    reset: () => ipcRenderer.invoke('sounds:reset'),
    add: (args) => ipcRenderer.invoke('add-sound', args),
    remove: (args) => ipcRenderer.invoke('remove-sound', args),
    update: (args) => ipcRenderer.invoke('update-sound', args),
    getLibrary: () => ipcRenderer.invoke('get-sound-library'),
    selectFile: () => ipcRenderer.invoke('select-sound-file'),
    toggleLike: (args) => ipcRenderer.invoke('sounds:toggleLike', args),
    setBackgroundMusicSettings: (settings) => ipcRenderer.invoke('sounds:setBackgroundMusicSettings', settings),
    getBackgroundMusicSettings: () => ipcRenderer.invoke('sounds:getBackgroundMusicSettings'),
  },
  steam: {
    getInstalledGames: () => ipcRenderer.invoke('steam:getInstalledGames'),
    pickLibraryFolder: () => ipcRenderer.invoke('steam:pickLibraryFolder'),
    // New Steam APIs for enhanced integration
    detectInstallation: () => ipcRenderer.invoke('detectSteamInstallation'),
    getLibraries: (args) => ipcRenderer.invoke('getSteamLibraries', args),
    scanGames: (args) => ipcRenderer.invoke('scanSteamGames', args),
  },
  epic: {
    getInstalledGames: () => ipcRenderer.invoke('epic:getInstalledGames'),
  },
  wallpapers: {
    get: () => ipcRenderer.invoke('wallpapers:get'),
    set: (data) => ipcRenderer.invoke('wallpapers:set', data),
    reset: () => ipcRenderer.invoke('wallpapers:reset'),
    add: (args) => ipcRenderer.invoke('wallpapers:add', args),
    delete: (args) => ipcRenderer.invoke('wallpapers:delete', args),
    setActive: (args) => ipcRenderer.invoke('wallpapers:setActive', args),
    toggleLike: (args) => ipcRenderer.invoke('wallpapers:toggleLike', args),
    setCyclingSettings: (args) => ipcRenderer.invoke('wallpapers:setCyclingSettings', args),
    getFile: (url) => ipcRenderer.invoke('wallpapers:get-file', url),
    saveFile: (args) => ipcRenderer.invoke('wallpapers:save-file', args),
    // Monitor-specific wallpaper APIs
    getMonitorWallpaper: (monitorId) => ipcRenderer.invoke('wallpapers:getMonitorWallpaper', monitorId),
    setMonitorWallpaper: (monitorId, wallpaperData) => ipcRenderer.invoke('wallpapers:setMonitorWallpaper', { monitorId, wallpaperData }),
    getMonitorSettings: (monitorId) => ipcRenderer.invoke('wallpapers:getMonitorSettings', monitorId),
    setMonitorSettings: (monitorId, settings) => ipcRenderer.invoke('wallpapers:setMonitorSettings', { monitorId, settings }),
  },
  icons: {
    add: ({ filePath, filename }) => ipcRenderer.invoke('icons:add', { filePath, filename }),
    list: () => ipcRenderer.invoke('icons:list'),
    delete: (url) => ipcRenderer.invoke('icons:delete', { url }),
  },
  selectWallpaperFile: () => ipcRenderer.invoke('wallpaper:selectFile'),
  selectIconFile: () => ipcRenderer.invoke('icon:selectFile'),
  selectExeOrShortcutFile: () => ipcRenderer.invoke('select-exe-or-shortcut-file'),
  onWallpapersUpdated: (cb) => ipcRenderer.on('wallpapers:updated', cb),
  offWallpapersUpdated: (cb) => ipcRenderer.removeListener('wallpapers:updated', cb),
  channels: {
    get: () => ipcRenderer.invoke('channels:get'),
    set: (data) => ipcRenderer.invoke('channels:set', data),
    reset: () => ipcRenderer.invoke('channels:reset'),
    copyHoverSound: ({ filePath, filename }) => ipcRenderer.invoke('channels:copyHoverSound', { filePath, filename }),
  },
  resetAll: () => ipcRenderer.invoke('settings:resetAll'),
  resolveUserdataUrl: (url) => ipcRenderer.invoke('resolve-userdata-url', url),
  // Window management APIs
  close: () => ipcRenderer.send('close-window'),
  toggleFullscreen: () => ipcRenderer.send('toggle-fullscreen'),
  toggleFrame: () => ipcRenderer.send('toggle-frame'),
  minimize: () => ipcRenderer.send('minimize-window'),
  onFullscreenState: (cb) => ipcRenderer.on('fullscreen-state', (e, val) => cb(val)),
  onFrameState: (cb) => ipcRenderer.on('frame-state', (e, val) => cb(val)),
  openPipWindow: (url) => ipcRenderer.send('open-pip-window', url),
  openExternal: (url) => ipcRenderer.send('open-external-url', url),
  launchApp: (data) => ipcRenderer.send('launch-app', data),
  getAutoLaunch: () => ipcRenderer.invoke('get-auto-launch'),
  setAutoLaunch: (enable) => ipcRenderer.invoke('set-auto-launch', enable),
  // Auto-updater APIs
  updater: {
    checkForUpdates: () => ipcRenderer.invoke('check-for-updates'),
    dismissUpdateNotification: () => ipcRenderer.invoke('update-notification:dismiss'),
    installUpdate: () => ipcRenderer.invoke('update-notification:install-update'),
    downloadUpdate: () => ipcRenderer.invoke('download-update'),
    installUpdate: () => ipcRenderer.invoke('install-update'),
    onUpdateStatus: (cb) => ipcRenderer.on('update-status', (e, data) => cb(data)),
    offUpdateStatus: (cb) => ipcRenderer.removeListener('update-status', cb),
  },
  // Update notification event listeners
  onUpdateNotificationAvailable: (cb) => ipcRenderer.on('update-notification-available', (e, data) => cb(data)),
  offUpdateNotificationAvailable: (cb) => ipcRenderer.removeListener('update-notification-available', cb),
  onUpdateNotificationNotAvailable: (cb) => ipcRenderer.on('update-notification-not-available', (e) => cb()),
  offUpdateNotificationNotAvailable: (cb) => ipcRenderer.removeListener('update-notification-not-available', cb),
  onUpdateNotificationDismissed: (cb) => ipcRenderer.on('update-notification-dismissed', (e) => cb()),
  offUpdateNotificationDismissed: (cb) => ipcRenderer.removeListener('update-notification-dismissed', cb),
  onUpdateNotificationInstall: (cb) => ipcRenderer.on('update-notification-install', (e) => cb()),
  offUpdateNotificationInstall: (cb) => ipcRenderer.removeListener('update-notification-install', cb),
  getFullscreenState: () => ipcRenderer.invoke('get-fullscreen-state'),
  // Spotify OAuth APIs
  onSpotifyAuthSuccess: (cb) => ipcRenderer.on('spotify-auth-success', (e, data) => cb(data)),
  onSpotifyAuthError: (cb) => ipcRenderer.on('spotify-auth-error', (e, data) => cb(data)),
  getAppVersion: () => ipcRenderer.invoke('get-app-version'),
  apps: {
    getInstalled: () => ipcRenderer.invoke('apps:getInstalled'),
    rescanInstalled: () => ipcRenderer.invoke('apps:rescanInstalled'),
  },
  uwp: {
    listApps: () => ipcRenderer.invoke('uwp:list-apps'),
    launch: (appId) => ipcRenderer.invoke('uwp:launch', appId),
  },
  // Multi-monitor support
  monitors: {
    getDisplays: () => ipcRenderer.invoke('get-displays'),
    getPrimaryDisplay: () => ipcRenderer.invoke('get-primary-display'),
    getCurrentDisplay: () => ipcRenderer.invoke('get-current-display'),
    moveToDisplay: (displayId) => ipcRenderer.invoke('move-to-display', displayId),
    onDisplayAdded: (callback) => ipcRenderer.on('display-added', callback),
    onDisplayRemoved: (callback) => ipcRenderer.on('display-removed', callback),
    onDisplayMetricsChanged: (callback) => ipcRenderer.on('display-metrics-changed', callback),
  },
  executeCommand: (command) => ipcRenderer.invoke('execute-command', command),
  takeScreenshot: () => ipcRenderer.invoke('take-screenshot'),
  // Fresh install API
  getFreshInstallInfo: () => ipcRenderer.invoke('get-fresh-install-info'),
  triggerFreshInstall: () => ipcRenderer.invoke('trigger-fresh-install'),
});
